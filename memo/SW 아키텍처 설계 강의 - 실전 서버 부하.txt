[jmeter 실습] - 성능 부하 테스트 - Basic, Advanced
jmeter 를 활용한 부하 테스트를 할 수 있냐 없냐에 따라 연봉 차이가 많이남

성능테스팅 - 시스템의 병목 지점을 찾아내는 것

성능테스트 : 실제 트래픽 상황에서의 정상 동작 여부 파악

부하테스트 : 이벤트 상황과 같은 트래픽 최대치 및 임계치 산정

A 시나리오
	쇼핑몰 운영
	홈페이지 접속 -> 로그인 -> 마이페이지 -> 생활카테고리, 전자, 식품, 의류 (랜덤하게)
	-> 1,2,3,4,5 (순서를 랜덤하게 상세페이지 본다.)
	-> 유저의 50%만 장바구니에 담음 -> 장바구니 담은 사람의 10% 만 결제를 한다
	
case4 산봉오리 그래프에서 CPU, Memory 사용량이 없는 이유
	was ─ app1 
		└ app2
	세 서버가 연결되었고 각각 20개의 스레드 정도를 처리할 수 있다고 할 때,
	was 스레드를 100개로 설정하고 초당 100개의 요청을 보내면,
	was 의 자원이 스레드를 만들어서 대응하는데 다 써버려서
	스레드 내 로직을 수행하지 못하게 된다.
	그래서 app 서버로 요청을 전달하지 못해 app 에서 CPU, Memory 사용량이 없게 된다.
	
jmeter 에 influxDb, 그라파나 플러그인를 추가해 시각화 자료로 사용할 수 있다.

대규모 부하 테스트는 10만 단위 이상
	2만 명만 넘어도 대규모라 볼 수 있음
	jmeter 는 자바로 만들어져서 하나로 모든 부하를 만들 수는 없음
	-> 여러 대 부하발생기를 병렬로 연결하는 분산 테스트를 대상으로 만들어져 있음
	
	분산을 위한 jmeter server 는 남는 서버나 클라우드 또는 다른 피시 등을 사용함.
	
	jmeter server 2Core, 4GB 가 적절하다 자바 기반이라 메모리를 2배 늘린다해서
	2배 테스트가 가능한 것은 아니고 1.3~1.4 배 정도 성능이 좋아진다

blazemeter : jmeter 스크립트 생성 도구(크롬 플러그인)
	화면에서 사용자 입력 레코딩 후 jmeter 테스트 스크립트 만듬
	생성된 스크립트에서 필요없는 부분은 직접 제거해야 함

[성능 테스트 & 컨설팅 실사례] - 실전 서버 부하 v3
테스트 결과를 바탕으로 임계점을 설정하는 방법 
	99% 의 사용자가 n 초 안에 들어오는 값을 임계점으로 해야한다.
	TPS 최대값을 임계점으로 잡으면 실 배포 때 엄청난 컴플레인을 받게 된다.
	
부하테스트는 시스템 오픈 한달 전부터 해야한다.
	테스트 후 튜닝을 할 시간이 필요하다
	
apm
	제니퍼소프트에서 만든게 제일 좋음
	자바로 만든 서비스는 제니퍼 소프트에서 나온 사람들이 만든 
	스카우터 APM 이라는 오픈소스 제품이 있음.
	엘라스틱 APM : 오픈소스
		인프라 모니터링

[부하테스트 실전 노하우]
느린 메소드 찾는법
	평소에 호출되지 않는 메소드 호출을 눈여겨 봄

주요 장애 유형
	수직선 - 특정 시간에 락이나 타임아웃이 걸렸다가 한순간에 락이 모두 풀린 경우
		-> DB 같은 곳에서 병목이 생겼구나
	수평선 - 외부 서비스에 문제가 있어서 요청이 동일한 시간만큼 기다렸다 오는 경우
	초기화에 의한 일시적인 병목현상
		- 피크 테스트, 특정 이벤트로 요청이 몰릴때
		- 회복만 가능하면 괜찮음
		- 캐시, db 서버의 캐시나 데이터 정리 등으로 완화가 되어야함
		
스프링에서 메모리 자원의 부족으로 Thread(FilterChain) 대기 현상 발생
	heap 메모리가 한계점에 도달하면 Thread 가 stuck 되는 현상이 발생함.
	아파치는 사용자마다 스레드를 만들기 때문에 사용자가 늘면 메모리 사용량도 비례해서 는다
	nginx 는 비동기라서 메모리가 일정 수준 이상 늘지 않는다
	참고 bcho.tistory.com/788
	-> 서킷 브레이커 패턴을 통해 전체 유저가 늦어지기보다 기존 유저들이라도
	쾌적하게 사용하도록 수정


트랜잭션에서 병목 찾기
	튜닝 대상은 트랜잭션이 많은 것 보다는 호출 빈도수랑 통신 호출시간을 곱한 값이 많은 것 부터
	처리하는 것이 성능을 많이 높일 수 있음.
	-> 서비스에 오래 머무는 트랜잭션을 우선 해결하자
	
[실제 사례 공유] - pdf 자료 없음
마사회
	부하테스트 프로그램 jmeter 를 통해 부하 요청을 보내고
	APM 을 통해 트랜잭션의 처리량과 tps 를 확인한다.
	가능하다면 어떤 메소드 스택에서 지연되는지 함께 확인한다.
	확인해보니 로그인 과정에서 tps 가 매우 늦음
	세션키와 캐쉬를 활용해 로그인을 하지 않고 매번 로그인해야 해서 느렸음
	-> 세션키와 캐쉬를 사용해 로그인 횟수를 줄이도록 안내
	-> 부하 발생을 견디기 위해 서킷브레이커 도입을 고려
	
셀트리온 스킨큐어
	특정 연예인으로 모델 교체 이후 홈페이지가 자주 다운 됨
	성능 분석을 해보니 로그인 과정이 매우 느렸고
	특정 페이지에서 130개 이상의 쿼리를 날림
	확인해보니 테이블이 연관관계를 가지고 모델링 되어있지 않고
	중복되는 컬럼을 많이 가지는 독립적인 테이블이 많이 있었음
	-> 페이지의 query 마다 테이블이 있는 구조
	따라서 데이터 쿼리에 시간이 많이 늘었음
	-> 드래그&드롭으로 쇼핑몰을 만드는 상용서비스를 이용해 웹페이지를 만들었기 때문
	-> DB 구조를 다시 만들던가 캐시를 달아 DB 테이블 접근을 최대한 줄임
	-> 후자가 비용이 적게 들어 캐시를 달아 DB 조회를 줄임
	-> 그리고 커넥션 풀을 늘리니 빨라짐
	
채용 사이트	
	사용자 정보에 개인정보, 학력정보, 수상정보 등 여러 정보가 있는데
	사용자 정보로 통채로 관리하기 떄문에 한 부분만 수정해도 이 정보들을 
	모두 매번 xml 로 serialize 해서 네트워크로 보냄.
	serialize 에 cpu, 메모리가 확확 올라감 
	사용자 정보에서 개인정보, 학력정보, 수상정보 등을 나눠서 관리하고
	수정되는 부분만 serialize 해서 통신하도록 수정하도록 가이드
	그리고 커넥션 풀을 늘리니 더 빨라짐
	
SK OVSE
	자동차 위치 정보를 받아오는 서비스
	매초 자동차의 위치를 받아오기 때문에 트래픽이 많음
	jmeter 와 apm 으로 부하테스트를 해보니
	logstash 가 자원을 많이 사용하고 트래픽이 더 늘어나면 에러를 발생시킴
	logstash 에 보낼 메시지를 만들기 위해 StringBuffer.append 를 사용
	append 함수는 시스템 리소스 메모리와 cpu 를 많이 사용함
	-> 확인해보니 제품 배포시 production 모드에서 로그를 저장하거나 출력하진 않지만
	로그 메시지를 계속 만들고 있어 문제가 발생했음
	-> 로그 메시지를 만드는 StringBuffer.append 부분을 production 모드에서
	동작하지 않도록 수정하니 해결됨

[클라우드, 백엔드] - cloud_server_apm
클라우드에서 서비스 하는 게임 사례
	클라우드 북경, 상해 지역에 게임을 배포함
	그런데 북경 지역에 배포된 서비스만 안 됨 
	-> 북경, 상해 같은 이미지로 올라가있기 때문에 서비스 문제라고 보기 어렵다.
	북경지역 유저가 게임결과를 저장하면 게임이 튕김
	결과를 저장하기 위해 클라우드 서버에서 디스크 IO 함
	-> 클라우드에서 디스크는 공유자원
	북경 지역 내 클라우드에 올라간 다른 서비스가 디스크를 IO 를 많이 써서 IOPS 떨어짐
	-> 북경 서비스가 올라갈 클라우드 지역 바꾸고 문제가 해결됨
	-> 클라우드에 올리면 서비스 문제가 아니라 클라우드 자체 문제일 수 있다.
	
cpu steal 지표
	물리 머신이 프로세스에 cpu 를 얼마나 기다렸다가 주는가
	-> 서비스 문제가 아니고 클라우드 환경이 얼마나 바쁜가

성능을 확인하기 위해 필요한 지표
	cpu, 메모리, 디스크, 네트워크
	성능 튜닝 참고 
		- https://www.brendangregg.com/
		- https://www.youtube.com/@BrendanGregg
	Brendan Gregg
		성능 지표를 모두 알 필요 없다 -> USE 메소드를 사용하라
	주로 확인해야 하는 성능 지표
		프로세스
		tcp connection
		메모리
		cpu
		디스크 IO
		네트워크
	TCP connection 상태도 모니터링해라
		특히 CLOSE_WAIT 를 주의깊게 살펴라
		관련 문서 : https://tech.kakao.com/2016/04/21/closewait-timewait/
크리티컬한 에러는 서비스 문제기 보다 외부 문제인 경우도 많다

클라우드 서비스의 가용성
	홈플러스 사례 - 홈플러스에서 IDC 에서 클라우드로 서비스 이전을 시도 했으나
		99.9% 이상의 가용성을 어떤 클라우드 서비스 회사도 보장한다고 하지 못 함
		-> IDC 로 계속 감. 글로벌 서비스가 아니라면 주요한 서비스는 IDC 로 하는 추세 
		클라우드가 어떻게 문제가 생길지 알 수 없다.
	
	클라우드 회사는 오버커밋등 리소스 뻥튀기 기술로 돈을 벌고 있어서
	생각보다 쾌적한 환경을 기대하기 어렵다.

트랜잭션에서 병목을 찾는 방법
	-> static + Dynamic profiling
	자바 애플리케이션 서버의 트랜잭션
		브라우저에서 요청된 URL 의 최종 결과 페이지를 만드는데 필요한 일련의 프로세스
		브라우저의 요청은 여러 클래스에서 처리됨
	성능을 위해 APM 에서 트랜잭션 프로파일에 수행되는 모든 메소드의 정보를 담고 있지 않는다.
	특정 요청의 트랜잭션 프로파일에서 제공하는 정보를 통해
	코드 수준, DB, Disk IO 등 에서 어느 부분이 문제인지 확인하고
	문제로 예상되는 부분의 자세한 트랜잭션 프로파일을 확인한다 <- 다이나믹 프로파일링
	예를 들어 트랜잭션에서 코드 레벨에서 많은 시간을 잡아먹으면
	각 클래스와 메소드가 실행되는 시간을 확인한다.
	APM 에서 이런 분석이 가능하도록 동적으로 원하는 프로파일을 추가할 수 있어야 한다.
	
	참고 문서 : https://jennifersoft.com/ko/blog/tech/2019-03-05/
	
full gc 
	heap old 영역에서 수행되는 gc
	young 영역에서 수행되는 minor gc 에 비해 속도가 많이 느리다
	minor gc 는 0.5s 쯤 거릴지만 full gc 는 심하면 3s 까지 걸린다
	full gc 가 수행되는 동안 stop the world 되어 자바 애플리케이션이 멈춘다.
	
[모바일, 웹 프론트엔드]
	사진 파일의 크기 문제로 웹이 버벅일 떄 -> 사진 파일을 png 로 다루자
	구글이나 크롬을 사용한다면 webp 형식을 사용하자
	
	외부 플랫폼에서 데이터를 못가져왔을때 어떻게 할 건지 대안을 생각하며 개발해야한다.
	
	질문이 있습니다
	vuejs + 부트스트랩을 활용해 공정데이터 처리 현황을 그리는 대쉬보드를 웹으로 만들었습니다.
	3~4시간 동안 차트를 그리다가 크롬에서 웹이 메모리 누수로 죽는 현상이 발생했습니다.
	
	처리할 데이터를 vuejs 내부 store 에서 제대로 처리하지 못해 생긴 메모리 누수인줄 알고
	고정된 수의 데이터 이상 저장하지 않도록 수정했지만 웹이 죽는 현상이 계속 발생했습니다.
	
	브라우저에서 화면을 그리는 과정에서 문제가 생긴 것으로 예상하고
	부트스트랩 쪽을 확인해보고 싶은데, 이런 경우 어떤 도구를 활용해 원인을 파악할 수 있을까요?
	
	-> 장담할 수 있음. 차트 문제임. 
	hi chart, am chart 다 써봐도 APEXCHART 추천 메모리 적으로 안정화 되어 있다는 것을 보장함. 
	또는 APEXCHART 기반 fusion chart(풀 라이센스 500 만원)
	업계에서는 high chart(오픈소스) 를 많이쓰고 지도는 am chart 가 잘되어 있음.
	굳이 라이브러리를 뜯어고치지 말고 돈주고 사서 써라 까딱하면 6개월 가까이 걸림.
	
	
안녕하세요 질문이 있습니다.
reactor_thread 실습과 아파치의 maxConnection, maxThread 설정을 보며
궁금한 점이 생겼습니다.

reactor_thread 실습에서는 dispatcher 에서 요청마다 socket 을 만들고 새로운 스레드에서 
handleEvent 를 실행해서 한 Connection 이 한 스레드에서 동작합니다.

BIO 를 사용하는 아파치에서도 같은 구조로 동작하는 걸까요?
그럼 maxConnection 은 socket close 를 고려해 maxThread 보다 
좀 더 많은 숫자로 설정하면 될까요?
(maxConnection=120, maxThread=100)

-> 맞음 아파치도 한 개의 커넥션은 한 개의 스레드에서 동작됨
maxConnection 120 설정하고 maxThread 100 개로 설정해도 됨.
그러나 최대 maxConnection 과 최대 maxThread 는 서비스마다
jmeter 로 측정해 봐야 한다.
서비스가 어떻게 블로킹 되게 구형되어 있는지 다 다르기 때문

